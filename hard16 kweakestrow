import java.util.*;

public class KWeakestRows {
    
    public static int[] kWeakestRows(int[][] mat, int k) {
        
        class RowInfo implements Comparable<RowInfo> {
            int soldiers;
            int index;
            
            RowInfo(int soldiers, int index) {
                this.soldiers = soldiers;
                this.index = index;
            }
            
            @Override
            public int compareTo(RowInfo other) {
                if (this.soldiers == other.soldiers) {
                    return Integer.compare(this.index, other.index);
                }
                return Integer.compare(this.soldiers, other.soldiers);
            }
        }
        
       
        List<RowInfo> rows = new ArrayList<>();
        
     
        for (int i = 0; i < mat.length; i++) {
            int soldiers = countSoldiers(mat[i]);
            rows.add(new RowInfo(soldiers, i));
        }
        
        // Sort rows based on soldier count and index
        Collections.sort(rows);
        
        // Extract the indices of the first k weakest rows
        int[] result = new int[k];
        for (int i = 0; i < k; i++) {
            result[i] = rows.get(i).index;
        }
        
        return result;
    }
    
  
    private static int countSoldiers(int[] row) {
        int count = 0;
        for (int num : row) {
            if (num == 1) {
                count++;
            } else {
                break;
            }
        }
        return count;
    }
    
    public static void main(String[] args) {
        int[][] mat = {
            {1, 1, 0, 0, 0},
            {1, 1, 1, 1, 0},
            {1, 0, 0, 0, 0},
            {1, 1, 0, 0, 0},
            {1, 1, 1, 1, 1}
        };
        int k = 3;
        
        int[] result = kWeakestRows(mat, k);
        System.out.print("Indices of the k weakest rows: ");
        for (int index : result) {
            System.out.print(index + " ");
        }
        System.out.println();
    }
}
